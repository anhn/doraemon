import streamlit as st
import pandas as pd
from collections import Counter
import underthesea
import re
import tempfile

# Predefined synonym suggestion dictionary (expand as needed)
AUTO_SYNONYM_GROUPS = {
    "tr·ª• s·ªü": ["c∆° s·ªü", "ƒë·ªãa ƒëi·ªÉm"],
    "c∆° s·ªü": ["tr·ª• s·ªü", "ƒë·ªãa ƒëi·ªÉm"],
    "ƒë·ªãa ƒëi·ªÉm": ["tr·ª• s·ªü", "c∆° s·ªü"],
    "t·ªï h·ª£p": ["kh·ªëi"],
    "kh·ªëi": ["t·ªï h·ª£p"],
    "chu·∫©n": ["ƒë·ªó"],
    "ƒë·ªó": ["chu·∫©n"],
    "tuy·ªÉn sinh": ["nh·∫≠p h·ªçc", "thi tuy·ªÉn"],
    "ng√†nh": ["chuy√™n ng√†nh", "m√¥n h·ªçc"],
    "x√©t tuy·ªÉn": ["tuy·ªÉn ch·ªçn", "ch·ªçn l·ªçc"]
}

def suggest_synonyms(word):
    return ", ".join(AUTO_SYNONYM_GROUPS.get(word, []))

# Streamlit UI
st.title("üìö T·∫°o Danh S√°ch T·ª´ ƒê·ªìng Nghƒ©a Tuy·ªÉn Sinh Ti·∫øng Vi·ªát")
st.markdown("T·∫£i l√™n file Excel ch·ª©a vƒÉn b·∫£n ti·∫øng Vi·ªát. ·ª®ng d·ª•ng s·∫Ω tr√≠ch xu·∫•t c√°c t·ª´ li√™n quan ƒë·∫øn tuy·ªÉn sinh v√† ƒë·ªÅ xu·∫•t t·ª´ ƒë·ªìng nghƒ©a.")

uploaded_file = st.file_uploader("üìÇ T·∫£i l√™n file Excel", type=["xlsx"])

if uploaded_file:
    try:
        df = pd.read_excel(uploaded_file)
        st.success("‚úÖ File ƒë√£ ƒë∆∞·ª£c t·∫£i l√™n th√†nh c√¥ng.")

        if st.button("üöÄ T·∫°o b·∫£n ƒë·ªì t·ª´ ƒë·ªìng nghƒ©a"):
            with st.spinner("üîÑ ƒêang ph√¢n t√≠ch..."):
                corpus = ' '.join(df.astype(str).apply(lambda x: ' '.join(x), axis=1))
                tagged = underthesea.pos_tag(corpus)

                # Filter words with relevant POS tags
                keywords = [
                    word.lower() for word, tag in tagged
                    if tag in ["N", "Np", "V"] and len(word) > 2
                ]

                # Count frequency
                freq = Counter(keywords)
                common = freq.most_common(200)

                # Create DataFrame
                df_synonyms = pd.DataFrame(common, columns=["base_word", "frequency"])
                df_synonyms["suggested_synonyms"] = df_synonyms["base_word"].apply(suggest_synonyms)
                df_synonyms["user_synonyms"] = ""  # for user to fill

                st.success(f"‚úÖ ƒê√£ tr√≠ch xu·∫•t {len(df_synonyms)} t·ª´ kh√≥a.")
                st.dataframe(df_synonyms.head(10))

                with tempfile.NamedTemporaryFile(delete=False, suffix=".xlsx") as tmp:
                    df_synonyms.to_excel(tmp.name, index=False)
                    st.download_button(
                        label="üì• T·∫£i v·ªÅ danh s√°ch t·ª´ ƒë·ªìng nghƒ©a",
                        data=open(tmp.name, "rb").read(),
                        file_name="vietnamese_synonym_map_auto.xlsx",
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                    )
    except Exception as e:
        st.error(f"‚ùå L·ªói khi x·ª≠ l√Ω file: {str(e)}")
